#!/bin/sh
#
##
##   Shitty sCreenshot scRipt
##     (and Recording ^)
##
#

trap 'pkill -2 -P $(cat /tmp/"${0##*/}"-pid)' 15 2

m() {
	menu -i "$@"
}

# exit if X isn't running
[ ! "$DISPLAY" ] &&
	echo "Can't open display; exiting" && exit

# output file, use $REC_DIR and $REC_FILE if they are set
output="${REC_DIR:-$PWD}/${REC_FILE:-$(date '+%Y-%m-%d_%H-%M-%S').mp4}"
n="${SCR_DIR:-$PWD}/${SCR_FILE:-$(date '+%Y-%m-%d_%H-%M-%S').png}"

# find default audio device
audio() {
	pacmd="$(pacmd list-sources | grep -i -B 1 output)"
	dev="$(echo "$pacmd" | grep -i '\* index' ||
		echo "$pacmd" | grep -i 'index' | head -n 1)"
	audio="-f pulse -i $(echo "$dev" | grep -o '[0-9]\+')"
}

help() {
	cat << EOF
Options
 -S    screenshot a selection
 -F    screenshot focused window

 -s    save the recording
 -h    display this message
 -c    skip the confirm start message
 -p  ? save and load settings from profile
 -f  ? framerate
 -b  ? force bitrate  (in MB)
 -m  ? force method   (boox, display)
 -d  ? force display
 -n    disable NVENC for unsupported nvidia cards
 -a    Record desktop audio

if 0 args are provided, screenshot the focused monitor
use '-r' as a placeholder option

? = Option requires another argument

Variables
 REC_DIR: If unset, saves in the current directory
 REC_FILE: If unset, saves as '\$(date '+%Y-%m-%d_%H-%M-%S').mp4'

 SCR_DIR: If unset, saves in the current directory
 SCR_FILE: If unset, saves as '\$(date '+%Y-%m-%d_%H-%M-%S').png'

Dependencies
 github.com/pockata/mmutils | getting info about displays
AND / OR
 github.com/BanchouBoo/boox | selecting an area

Recording:
 ffmpeg
 dmenu (or a clone) (with the binary name 'menu')

Screenshotting:
 github.com/neXromancers/shotgun
 wmutils         | getting focused window
 xclip           | copying image to clipboard
EOF
}

case $1 in
	-F) shotgun -i "$(pfw)" "${2:-$n}"; exit;;
	""|*.png) shotgun -g "$(mattr -g "$(pfm)")" "${1:-$n}"; exit;;
	-S) w="$(boox)" &&
		sleep 0.05 &&
		n="${n%.*}-${w%%+*}.png" &&
		shotgun -g "$w" "${2:-$n}"
		exit
	;;
esac

while [ "$1" ]; do
	case "$1" in
		-h|--help) help;   exit;;
		-r) ;;
		-s) pkill -x "${0##*/}";  exit;;
		-a) audio;;
		-c) ready="yes";;
		-p) profile="$2";  shift;;
		-m) method="$2";   shift;;
		-f) rate="$2";     shift;;
		-n) nvenc=" ";;
		-d) display="$2" method="display";  shift;;
		-b) bitrate="-b:v ${2}M";           shift;;
		--)	[ "$2" ] && output="$2";        break;;
		-*) echo "Invalid option '$1'";     exit;;
		*)  output="$1";   break;;
	esac
	shift
done

[ "$REC_DIR" ] &&
	mkdir -p "$REC_DIR"

[ -f /tmp/"${0##*/}"-pid ] && notify-send "${0##*/} is already running, exiting." && exit


# load profile
if [ "$profile" ]; then
	mkdir -p "${XDG_CONFIG_HOME:-~/.config}/scr" >/dev/null 2>&1
	profile_location="${XDG_CONFIG_HOME:-~/.config}/scr/scr-$profile"
	[ -f "$profile_location" ] && . "$profile_location"
fi



if [ ! "$method" ]; then
	# Check if the user has boox and mmutils
	command -v boox  >/dev/null 2>&1 && s=s
	command -v mattr >/dev/null 2>&1 && d=d

	# if the user only has boox or mmutils (But not both) use that
	[ "$s" ] && method=selection
	[ "$d" ] && method=display

	# if the user has both boox and mmutils ask the user which one to use
	[ "$s" ] && [ "$d" ] &&
		method="$(printf "display\nselection\n" | m -p "Method of recording")"
fi
case $method in
	display)
		# get information about the screen
		lsm="$(lsm)"

		# if there's only one display, use that and skip asking
		if [ "$(echo "$lsm" | wc -l)" = 1 ]; then
			display="$lsm"
		else  # if there are other displays ask the user which one to use
			[ ! "$display" ] && display="$(printf %b "$lsm" | m -p "Display to record")"
		fi

		# get information about the display
		set -- $(mattr whxy "$display")
		width="$1"
		height="$2"
		offX="$3"
		offY="$4"
	;;
	boox|selection)
		# select an area and make each number a separate word
		eval "$(boox 'W=%w\nH=%h\nX=%x\nY=%y')"

		# get information about the display
		width="$W"
		height="$H"
		offX="$X"
		offY="$Y"

		[ "$((  width % 2 ))" = 1 ] &&  width="$((  width + 1 ))"
		[ "$(( height % 2 ))" = 1 ] && height="$(( height + 1 ))"
	;;
	*)
		echo "Invalid method; exiting"
	;;
esac



# prompt for framerate
[ ! "$rate" ] && rate="$(printf "30\n60\n" | m -p "Framerate")"

# save profile
if [ "$profile" ]; then
	cat << EOF > "$profile_location"
${bitrate:+bitrate="$bitrate"}
${display:+display="$display"}
${rate:+rate="$rate"}
method="$method"
EOF
fi

# detect if the user has a nvidia card and use nvenc
[ ! "$nvenc" ] && lspci | grep -qi nvidia &&
	nvenc="-vcodec h264_nvenc"


# confirm starting the recording
[ ! "$ready" ] && ready="$(printf "yes\nno\n" | m -p "Start the recording")"

if [ "$ready" = yes ]; then
	notify-send -t 1500 "Recording Started"

	echo $$ > /tmp/"${0##*/}"-pid

	ffmpeg                         \
	  -loglevel error              \
	  -y                           \
	  $audio                       \
	  -f x11grab                   \
	  -draw_mouse 1                \
	  -s "${width}x$height"        \
	  -r "$rate"                   \
	  -i "$DISPLAY.0+$offX,$offY"  \
	  $bitrate                     \
	  -pix_fmt yuv420p             \
	  $nvenc                       \
	  -q:v 0                       \
	  "$output"

	rm /tmp/"${0##*/}"-pid
	notify-send -t 2000 "Recording Stopped"
fi
