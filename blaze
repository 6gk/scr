#!/bin/sh
#
# Source:
#   https://github.com/GaugeK/dots/
#
# I actually use variable "word splitting" to my advantage
#   shellcheck disable=SC2086 disable=SC2046
#
# I know && isn't if
#   shellcheck disable=SC2015
#

case "$(readlink /bin/sh)" in
	*bash) print() { echo -e "$@"; };;
	*)     print() { echo    "$@"; };;
esac

deps() {
	md="$(for i in $deps; do print " - \033[31m$i\033[0m"; done)"

	print "\033[31mYou are missing dependencies\033[0m
$md

\033[34mRequired dependencies\033[0m
 - \033[34mffmpeg\033[0m         Actually recording
 - \033[34mrofi\033[0m           Selecting the options
 - \033[34mpkill\033[0m          Ending the recordings

\033[35mAt least one of these is required\033[0m
 - \033[35mdisputils\033[0m      Selecting a display to record
 - \033[35mslop\033[0m           Selecting an area to record

\033[32mOptional dependencies\033[0m
 - \033[32mnotify-send\033[0m    Letting the user know when the recording starts/ends
"
	exit 1
}

_() { command -v "$1" >/dev/null 2>&1 || deps="$deps $1"; }

_ rofi
_ pkill
_ ffmpeg
command -v dattr slop >/dev/null 2>&1 || deps="$deps disputils/slop"

[ "$deps" ] && deps


m() {
	rofi -dmenu -i "$@"
}

# exit if X isn't running
[ ! "$DISPLAY" ] &&
	print "Can't open display; exiting" && exit

# output file, use $BLAZE_DIR and $BLAZE_FILE if they are set
output="${BLAZE_DIR:-$HOME/opt/x/recs}/${BLAZE_FILE:-blaze-$(date '+%Y-%m-%d_%H-%M-%S').mp4}"

help="
\033[34mOptions\033[0m
  \033[37m-s / --save\033[0m        Stop ffmpeg (Warning, not just in this script)
  \033[37m-c / --confirm\033[0m     Don't ask if the user is ready to record
  \033[37m-p / --preset\033[0m   \033[35m[]\033[0m Save to and load from preset <x>
  \033[37m-b / --bitrate\033[0m  \033[35m[]\033[0m force bitrate (in MB)
  \033[37m-h / --help\033[0m        Display what you're reading right now

\033[35m[]\033[0m = Option requires a value

Anything after these will be the output file (optional)

\033[34mVariables\033[0m
  \033[37mBLAZE_DIR\033[0m        Location to save the video
                     \033[37mDefault: '\$HOME/opt/x/recs'\033[0m
  \033[37mBLAZE_FILE\033[0m       Name of the saved video
                     \033[37mDefault: 'blaze-\$(date '+%Y-%m-%d_%H-%M-%S').mp4'\033[0m
"

while [ "$1" ]; do
	case "$1" in
		-h|--help)    print "$help"; exit  ;;
		-s|--save)    pkill ffmpeg; exit   ;;
		-c|--confirm) ready="yes"          ;;
		-p|--preset)  preset="$2"; shift   ;;
		-b|--bitrate) bitrate="-b:v ${2}M"; shift;;
		*) output="$1"; break;;
	esac
	shift
done




if [ "$preset" ]; then
	# make the directory blaze presets are stored
	mkdir -p "${XDG_CONFIG_HOME:-~/.config}/blaze" >/dev/null 2>&1

	# the location of the current preset
	preset_location="${XDG_CONFIG_HOME:-~/.config}/blaze/blaze-preset-$preset"

	[ -f "$preset_location" ] &&
		. "$preset_location"
fi



# ask the user what method they want to use
if [ ! "$method" ]; then
	# Check if the user has slop and disputils
	command -v slop  >/dev/null 2>&1 && s=s
	command -v dattr >/dev/null 2>&1 && d=d

	# if the user only has slop or disputils (But not both) use that
	[ "$s" ] && method=selection
	[ "$d" ] && method=display

	# if the user has both slop and disputils ask the user which one to use
	[ "$s" ] && [ "$d" ] &&
		method="$(print "display\nselection" | m -p "Method of recording")"

fi

if [ "$method" = display ]; then

	# get information about the screen
	lsd="$(lsd)"

	# if there's only one display, use that and skip asking
	if [ $(print "$lsd" | wc -l) = 1 ]; then
		display="$lsd"
	else  # if there are other displays ask the user which one to use
		[ ! "$display" ] && display="$(print "$lsd" | m -p "Display to record")"
	fi

	# get information about the display
	width="$(dattr  w "$display")"
	height="$(dattr h "$display")"
	offX="$(dattr x "$display")"
	offY="$(dattr y "$display")"

elif [ "$method" = selection ]; then

	# select an area and make each number a separate word
	set -- $(slop -f '%w %h %x %y')

	# get information about the display
	width="$1"
	height="$2"
	offX="$3"
	offY="$4"

	[ "$(( width % 2 ))" = 1 ] && width="$(( width + 1 ))"
	[ "$(( height % 2 ))" = 1 ] && height="$(( height + 1 ))"

else

	print "Invalid method; exiting"
	exit 1

fi

# ask the user what they want the framerate of the video to be
[ ! "$rate" ] && rate="$(print "30\n60" | m -p "Framerate")"


if [ "$preset" ] && [ "$method" = display ]; then

	print "rate=\"$rate\"
display=\"$display\"
[ ! \"\$bitrate\" ] &&
	bitrate=\"$bitrate\"
method=\"$method\"" > "$preset_location"

fi




# ask the user if they want to start the recording
[ ! "$ready" ] && ready="$(print "yes\nno" | m -p "Start the recording")"

if [ "$ready" = yes ]; then
	notify-send -t 1500 "Recording Started"

	#
	# -loglevel error   | makes ffmpeg only print errors to the terminal
	# -y                | don't ask to start
	# -draw_mouse 1     | show the mouse in the video
	# -s                | specifies the size of the recording
	# -r "$rate"        | specifies the framerate of the video
	# -i                | the input X display (not physical monitor) and offset
	# -pix_fmt yuv420p  | allows the video to be played on browsers like firefox
	# -q:v              | changes the quality of the video, lower is better.
	# "$output"         | file to save the recording to
	#

	ffmpeg                           \
		-loglevel error              \
		-y                           \
		-f x11grab                   \
		-draw_mouse 1                \
		-s "${width}x$height"        \
		-r "$rate"                   \
		-i "$DISPLAY.0+$offX,$offY"  \
		$bitrate                     \
		-pix_fmt yuv420p             \
		-q:v 0                       \
		"$output"

	notify-send -t 2000 "Recording Stopped"
fi
